sudo: required

language: python
python: 2.7

services:
  - docker

env:
  matrix:
    - TOX_ENV=py27
    - COMPOSE=True
    - KUBE=True
  global:
    - secure: "PgEA6vDYZWAIZ3KyUTeA9SNSNR+eJU3kBkoEIsTnmnkyta0Z0VbIv98B9ApYeiC0VHpVzY1gblimmkXSY5+4oD9tUxpA630cUhE9iLNuo5o3MpRFun8nf8H6Jz2Y/PaPw3VPLKsH49LJYgJXeqgzoV7FHrpUP9Q3/5dycWybV2I="

git:
  submodules: false

before_install:
  - set -e
  - export GALAXY_HOME=/home/galaxy
  - export GALAXY_USER=admin@galaxy.org
  - export GALAXY_USER_EMAIL=admin@galaxy.org
  - export GALAXY_USER_PASSWD=admin
  - export BIOBLEND_GALAXY_API_KEY=admin
  - export BIOBLEND_GALAXY_URL=http://localhost:8080

  - sudo apt-get update -qq
  - sudo apt-get install docker-engine --no-install-recommends -y -o Dpkg::Options::="--force-confmiss" -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew"
  - sudo apt-get install sshpass --no-install-recommends -y

  - docker --version
  - docker info
  - |
    if [ "${KUBE}" ]
    then
      # setup k8s, we will do this before building Galaxy because it takes some time and hopefully we can do both in prallel
      gimme 1.8
      source ~/.gimme/envs/go1.8.env
      sudo ln -s /home/travis/.gimme/versions/go1.7.linux.amd64/bin/gofmt /usr/bin/gofmt
      sudo ln -s /home/travis/.gimme/versions/go1.7.linux.amd64/bin/go /usr/bin/go
      go version
      mkdir ../kubernetes
      wget -q -O - https://github.com/kubernetes/kubernetes/archive/master.tar.gz | tar xzf - --strip-components=1 -C ../kubernetes
      cd ../kubernetes
      # k8s API port is running by default on 8080 as Galaxy, can this to 8000
      export API_PORT=8000
      ./hack/install-etcd.sh
      sudo ln -s `pwd`/third_party/etcd/etcd /usr/bin/etcd
      sudo ln -s `pwd`/third_party/etcd/etcdctl /usr/bin/etcdctl
      # this needs to run in backgroud later, for now try to see the output
      sudo ./hack/local-up-cluster.sh &
      cd ../docker-galaxy-stable
    fi


  # start building this repo
  - git submodule update --init --recursive
  - sudo chown 1450 /tmp && sudo chmod a=rwx /tmp
  - |
    if [ "${COMPOSE}" ]
    then
        pip install docker-compose
        export WORKING_DIR="$TRAVIS_BUILD_DIR/compose"
        export DOCKER_RUN_CONTAINER="galaxy-web"
        INSTALL_REPO_ARG="--galaxy-url http://localhost:80"
        SAMPLE_TOOLS=/export/config/sample_tool_list.yaml
        cd "$WORKING_DIR"
        ./buildlocal.sh
        export COMPOSE_PROJECT_NAME=galaxy_compose
        docker-compose up -d
        sleep 120
        docker-compose logs
        # Define start functions
        docker_exec() {
          cd $WORKING_DIR
          docker-compose exec galaxy-web "$@"
        }
        docker_exec_run() {
          cd $WORKING_DIR
          docker-compose exec galaxy-web "$@"
        }
        docker_run() {
          cd $WORKING_DIR
          docker-compose run "$@"
        }
        
    elif [ "${KUBE}" ]
    then
        curl -L https://github.com/kubernetes-incubator/kompose/releases/download/v0.5.0/kompose-linux-amd64 -o kompose
        chmod +x kompose
        sudo mv ./kompose /usr/bin/kompose

        pip install docker-compose
        export WORKING_DIR="$TRAVIS_BUILD_DIR/compose"
        export DOCKER_RUN_CONTAINER="galaxy-web"
        INSTALL_REPO_ARG="--galaxy-url http://localhost:80"
        SAMPLE_TOOLS=/export/config/sample_tool_list.yaml
        cd "$WORKING_DIR"
        ./buildlocal.sh
        export COMPOSE_PROJECT_NAME=galaxy_compose
        docker-compose up -d
        sleep 120
        docker-compose logs
        # Define start functions
        docker_exec() {
          cd $WORKING_DIR
          docker-compose exec galaxy-web "$@"
        }
        docker_exec_run() {
          cd $WORKING_DIR
          docker-compose exec galaxy-web "$@"
        }
        docker_run() {
          cd $WORKING_DIR
          docker-compose run "$@"
        }

        docker ps
    else
        export WORKING_DIR="$TRAVIS_BUILD_DIR"
        export DOCKER_RUN_CONTAINER="quay.io/bgruening/galaxy"
        INSTALL_REPO_ARG=""
        SAMPLE_TOOLS=$GALAXY_HOME/ephemeris/sample_tool_list.yaml
        cd "$WORKING_DIR"
        docker build -t quay.io/bgruening/galaxy galaxy/
        mkdir local_folder
        docker run -d -p 8080:80 -p 8021:21 -p 8022:22 \
            --name galaxy \
            --privileged=true \
            -v `pwd`/local_folder:/export/ \
            -e GALAXY_CONFIG_ALLOW_USER_DATASET_PURGE=True \
            -e GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE=True \
            -e GALAXY_CONFIG_ENABLE_USER_DELETION=True \
            -e GALAXY_CONFIG_ENABLE_BETA_WORKFLOW_MODULES=True \
            -v /tmp/:/tmp/ \
            quay.io/bgruening/galaxy
        sleep 30
        docker logs galaxy
        # Define start functions
        docker_exec() {
          cd $WORKING_DIR
          docker exec -t -i galaxy "$@"
        }
        docker_exec_run() {
          cd $WORKING_DIR
          docker run quay.io/bgruening/galaxy "$@"
        }
        docker_run() {
          cd $WORKING_DIR
          docker run "$@"
        }

    fi
  - docker ps

script:
  - set -e
  # Test submitting jobs to an external slurm cluster
  - |
      if [ ! "${COMPOSE}" ] && [ ! "${KUBE}" ]
      then
        # For compose slurm is already included and thus tested
        cd $TRAVIS_BUILD_DIR/test/slurm/ && bash test.sh && cd $WORKING_DIR
      fi
  # Test submitting jobs to an external gridengine cluster
  - |
      if [ ! "${COMPOSE}" ] && [ ! "${KUBE}" ]
      then
        # This test is not testing compose, thus disabled
        cd $TRAVIS_BUILD_DIR/test/gridengine/ && bash test.sh && cd $WORKING_DIR
      fi
  # Test Web api
  - curl -v --fail $BIOBLEND_GALAXY_URL/api/version

  # Test FTP Server upload
  - date > time.txt && curl -v --fail -T time.txt ftp://localhost:8021 --user $GALAXY_USER:$GALAXY_USER_PASSWD
  # Test FTP Server get
  - curl -v --fail ftp://localhost:8021 --user $GALAXY_USER:$GALAXY_USER_PASSWD

  # Test SFTP Server
  - sshpass -p $GALAXY_USER_PASSWD sftp -v -P 8022 -o User=$GALAXY_USER -o "StrictHostKeyChecking no" localhost <<< $'put time.txt'
  # Test self-signed HTTPS
  - |
     docker_run -d --name httpstest -p 443:443 -e "USE_HTTPS=True" $DOCKER_RUN_CONTAINER
     sleep 60s && curl -v -k --fail https://127.0.0.1:443/api/version
     echo | openssl s_client -connect 127.0.0.1:443 2>/dev/null | openssl x509 -issuer -noout| grep selfsigned
     docker logs httpstest && docker stop httpstest && docker rm httpstest

  - cd $TRAVIS_BUILD_DIR/test/bioblend/ && . ./test.sh && cd $WORKING_DIR/

  # Test the 'old' tool installation script
  - docker_exec_run bash -c "install-repository $INSTALL_REPO_ARG '--url https://toolshed.g2.bx.psu.edu -o iuc --name bedtools --panel-section-name BEDTools'"
  - |
    if [ "$COMPOSE" ] || [ "${KUBE}" ]
    then
      # Test without install-repository wrapper
      docker_exec_run bash -c 'cd $GALAXY_ROOT && python ./scripts/api/install_tool_shed_repositories.py --api admin -l http://localhost:80 --tool-deps --repository-deps --url https://toolshed.g2.bx.psu.edu -o iuc --name bedtools --panel-section-name BEDTools'
    fi
  # Test the 'new' tool installation script
#  - docker_exec bash -c "install-tools $GALAXY_HOME/ephemeris/sample_tool_list.yaml"
  - |
    if [ "$COMPOSE" ] || [ "${KUBE}" ]
    then
      # Compose uses the online installer (uses the running instance)
      docker_exec_run shed-install -g "http://localhost:80" -a admin -t "$SAMPLE_TOOLS"
    else
      docker_exec_run install-tools "$SAMPLE_TOOLS"
    fi
  # Test the Conda installation
  - docker_exec_run bash -c 'export PATH=$GALAXY_CONFIG_TOOL_DEPENDENCY_DIR/_conda/bin/:$PATH && conda --version && conda install samtools -c bioconda --yes'
  # Test Docker in Docker, used by Interactive Environments; This needs to be at the end as Docker takes some time to start.
  - docker_exec docker info
  # Check if the database image matches the current galaxy version
  - |
      if [ "$COMPOSE" ] || [ "${KUBE}" ]
      then
        cd $WORKING_DIR && bash ./dumpsql.sh
        git diff --exit-code $WORKING_DIR/galaxy-postgres/init-galaxy-db.sql.in || ( echo "Database dump does not equal dump in repository" && false )
      fi


after_success:
  - |
    if [ "$TRAVIS_PULL_REQUEST" == "false" -a "$TRAVIS_BRANCH" == "master" ]
    then
      echo "Generate and deploy html documentation"
      ./docs/bin/deploy_docs
    fi


notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/559f5480ac7a4ef238af
    on_success: change
    on_failure: always
    on_start: never
